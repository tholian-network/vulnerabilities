{
	"name": "CVE-2019-16789",
	"description": "In Waitress through version 1.4.0, if a proxy server is used in front of waitress, an invalid request may be sent by an attacker that bypasses the front-end and is parsed differently by waitress leading to a potential for HTTP request smuggling. Specially crafted requests containing special whitespace characters in the Transfer-Encoding header would get parsed by Waitress as being a chunked request, but a front-end server would use the Content-Length instead as the Transfer-Encoding header is considered invalid due to containing invalid characters. If a front-end server does HTTP pipelining to a backend Waitress server this could lead to HTTP request splitting which may lead to potential cache poisoning or unexpected information disclosure. This issue is fixed in Waitress 1.4.1 through more strict HTTP field validation.",
	"packages": [
		{
			"name": "waitress",
			"releases": {
				"bookworm": {
					"status": "resolved",
					"repositories": {
						"bookworm": "1.4.4-1.1"
					},
					"fixed_version": "1.4.1-1",
					"urgency": "not yet assigned"
				},
				"bullseye": {
					"status": "resolved",
					"repositories": {
						"bullseye": "1.4.4-1.1"
					},
					"fixed_version": "1.4.1-1",
					"urgency": "not yet assigned"
				},
				"buster": {
					"status": "open",
					"repositories": {
						"buster": "1.2.0~b2-2"
					},
					"urgency": "not yet assigned",
					"nodsa": "Minor issue",
					"nodsa_reason": ""
				},
				"sid": {
					"status": "resolved",
					"repositories": {
						"sid": "1.4.4-1.1"
					},
					"fixed_version": "1.4.1-1",
					"urgency": "not yet assigned"
				},
				"stretch": {
					"status": "open",
					"repositories": {
						"stretch": "1.0.1-1"
					},
					"urgency": "not yet assigned",
					"nodsa": "Minor issue",
					"nodsa_reason": ""
				}
			}
		}
	],
	"scope": "local"
}