{
  "name": "CVE-2016-9586",
  "type": "arbitrary code execution",
  "severity": "Medium",
  "vector": "Remote",
  "description": "libcurl's implementation of the printf() functions triggers a buffer overflow when doing a large floating point output. The bug occurs when the conversion outputs more than 255 bytes. The flaw happens because the floating point conversion is using system functions without the correct boundary checks.\r\nThe functions have been documented as deprecated for a long time and users are discouraged from using them in \"new programs\" as they are planned to get removed at a future point. But as the functions are present and there's nothing preventing users from using them, we expect there to be a certain amount of existing users in the wild.\r\nIf there are any application that accepts a format string from the outside without necessary input filtering, it could allow remote attacks.",
  "groups": [
    "AVG-117",
    "AVG-116",
    "AVG-115",
    "AVG-114",
    "AVG-113",
    "AVG-112"
  ],
  "packages": [
    "lib32-curl",
    "lib32-libcurl-gnutls",
    "libcurl-gnutls",
    "curl",
    "libcurl-compat",
    "lib32-libcurl-compat"
  ],
  "advisories": [
    "ASA-201701-9",
    "ASA-201701-8",
    "ASA-201701-7",
    "ASA-201701-11",
    "ASA-201701-10",
    "ASA-201612-22"
  ],
  "references": [
    "https://curl.haxx.se/docs/adv_20161221A.html"
  ],
  "notes": "This flaw is present in the curl_*printf (curlx_*printf) family of functions, which are not used by curl but are exposed from libcurl.\r\nTo be exposed, third-party code would need to be using these long-deprecated functions, with a floating-point specifier and user-controlled (floating-point) input. The overflow itself is of a 256-byte stack-allocated buffer, when the decimal expansion of the float exceeds that by up to 70 bytes. Beyond about 16 digits for a double, the decimal expansion is effectively random so the attacker has very little control over precisely what bytes are written."
}